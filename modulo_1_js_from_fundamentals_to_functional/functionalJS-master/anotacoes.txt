##########################################################
Local and global scope
##########################################################

    **** Escopo

    Define onde podemos acessar as variáveis, como um lifetime da variável. Onde ela está disponível.
    Quando uma variável está fora do escopo isto quer dizer que ela não existe naquele contexto.
    Local onde a variável tem um significado, se tentarmos acessar uma variável fora do escopo, esta variável não existirá.
    É criado dinâmicamente quando chamamos uma função.
    Cada chamada de função cria um escopo, logo, se uma função for chamada 3 vezes, então 3 escopos serão criados
    As {} que delimitam uma função podem ser vistos como os limites de um escopo, embora no momento da declaração da função este escopo não está criado. Isso se dá dinâmicamente quando a função for chamda
    Outras estruturas que também utilizam {} como While, for, if ou blocos não criam escopo como nas funções, então uma variável declarada dentro de um if é acessível fora dele 

    **** Escopo Local
    Quando uma variável é declarada dentro de uma função, ela é privada, e isso é chamado de escopo local.
    Ela somente pode ser acessada dentro da função em que foi declarada

    **** Escopo global
    No contexto de escopo global, a variável é declarada de forma que pode ser acessada por toda a aplicação.
    Para criar uma variável de escopo global basta criá-la fora de uma função.
    Pode ser muito perigoso ter nomes iguais de variáveis, pois o conteúdo desta variável pode ficar inconsistente.
    Uma variável, mesmo que declarada dentro de uma função, mas sem o uso de "var" / "const" ou "let" é entendida como global
    Todas as variáveis globais são armazenadas no objeto window (client-side)
    
    **** Parent Scope x Child Scope
    O "escopo pai" não tem acesso ao "escopo filho", isto é, se uma função declara uma segunda função, essa primeira função não tem acesso ao conteúdo das variáveis declaradas dentro da segunda função

    **** Procedence
    Quando temos variáveis com o mesmo nome em escopo aninhado, o que foi preenchido dentro do escopo filho ficará apenas dentro do escopo filho, nesta situação se você olhar para o valor desta variável fora do escopo filho, ela ainda terá o mesmo valor que foi declarado no escopo global, isto é, a alteração realizada dentro do escopo filho não é acessível.
    Tudo que está dentro de {} e que não for a declaração de um objeto, é considerado dentro de um bloco. O bloco é definido pelos {}
    
##########################################################
Closure
##########################################################

    **** Introdução
    É o próximo passo do escopo
    Uma closure acontece quando se retorna uma função dentro de outra função
    Closure é a função que pode ser chamada depois. Ao retornar uma função, vc pode armazená-la dentro de uma variável e executá-la posteriormente.
    Ao armazenar uma função em uma variável e depois executá-la mais de uma vez, o escopo criado na primeira execução é mantido. Logo se vc estiver fazendo um cálculo, as variáveis declaradas dentro da função não serão zeradas, pois como o escopo se manteve, os valores delas são os mesmos da ultima execução, logo uma nova execução realizará novos calculos com as variáveis tendo os valores da execução anterior. 
    Para se criar uma closure, primeiramente, se cria a função pai, definimos algumas variáveis na função pai, e então, colocamos um função filha (inner function), dentro do pai e retornamos esta função sem executá-la, isto é, sem os ()
    Para executar uma closure, criamos uma variável que receberá o retorno da função pai criada anteriormente, e então usamos o () na variável que recebeu o retorno da função pai, neste momento estaremos chamando (executando) a função filha que foi retornada
    

##########################################################
Callbacks
##########################################################    

    **** Module Pattern
    Uma forma de modularizar o código e criar estruturas de classe em Javascript, apis (uma interface com os dados), de maneira a ter propriedades e métodos privados, mas que retorna um objeto com métodos e propriedades públicas
    
    **** Higher Order Functions
    Receber uma função como argumento (input) ou retornar uma função (output) 

